# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateProduct {
  _avg: ProductAvgAggregate
  _count: ProductCountAggregate
  _max: ProductMaxAggregate
  _min: ProductMinAggregate
  _sum: ProductSumAggregate
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createManyProduct(data: [ProductCreateManyInput!]!): AffectedRowsOutput!
  createOneProduct(data: ProductCreateInput!): Product!
  deleteManyProduct(where: ProductWhereInput): AffectedRowsOutput!
  deleteOneProduct(where: ProductWhereUniqueInput!): Product
  updateManyProduct(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): AffectedRowsOutput!
  updateOneProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  upsertOneProduct(create: ProductCreateInput!, update: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product!
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Product {
  brand: String!
  category: String!
  countInStock: Int!
  description: String!
  id: String!
  image: String!
  name: String!
  numReviews: Int!
  price: Float!
  rating: Float!
}

type ProductAvgAggregate {
  countInStock: Float
  numReviews: Float
  price: Float
  rating: Float
}

input ProductAvgOrderByAggregateInput {
  countInStock: SortOrder
  numReviews: SortOrder
  price: SortOrder
  rating: SortOrder
}

type ProductCountAggregate {
  _all: Int!
  brand: Int!
  category: Int!
  countInStock: Int!
  description: Int!
  id: Int!
  image: Int!
  name: Int!
  numReviews: Int!
  price: Int!
  rating: Int!
}

input ProductCountOrderByAggregateInput {
  brand: SortOrder
  category: SortOrder
  countInStock: SortOrder
  description: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  numReviews: SortOrder
  price: SortOrder
  rating: SortOrder
}

input ProductCreateInput {
  brand: String!
  category: String!
  countInStock: Int!
  description: String!
  id: String
  image: String!
  name: String!
  numReviews: Int!
  price: Float!
  rating: Float!
}

input ProductCreateManyInput {
  brand: String!
  category: String!
  countInStock: Int!
  description: String!
  id: String
  image: String!
  name: String!
  numReviews: Int!
  price: Float!
  rating: Float!
}

type ProductGroupBy {
  _avg: ProductAvgAggregate
  _count: ProductCountAggregate
  _max: ProductMaxAggregate
  _min: ProductMinAggregate
  _sum: ProductSumAggregate
  brand: String!
  category: String!
  countInStock: Int!
  description: String!
  id: String!
  image: String!
  name: String!
  numReviews: Int!
  price: Float!
  rating: Float!
}

type ProductMaxAggregate {
  brand: String
  category: String
  countInStock: Int
  description: String
  id: String
  image: String
  name: String
  numReviews: Int
  price: Float
  rating: Float
}

input ProductMaxOrderByAggregateInput {
  brand: SortOrder
  category: SortOrder
  countInStock: SortOrder
  description: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  numReviews: SortOrder
  price: SortOrder
  rating: SortOrder
}

type ProductMinAggregate {
  brand: String
  category: String
  countInStock: Int
  description: String
  id: String
  image: String
  name: String
  numReviews: Int
  price: Float
  rating: Float
}

input ProductMinOrderByAggregateInput {
  brand: SortOrder
  category: SortOrder
  countInStock: SortOrder
  description: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  numReviews: SortOrder
  price: SortOrder
  rating: SortOrder
}

input ProductOrderByWithAggregationInput {
  _avg: ProductAvgOrderByAggregateInput
  _count: ProductCountOrderByAggregateInput
  _max: ProductMaxOrderByAggregateInput
  _min: ProductMinOrderByAggregateInput
  _sum: ProductSumOrderByAggregateInput
  brand: SortOrder
  category: SortOrder
  countInStock: SortOrder
  description: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  numReviews: SortOrder
  price: SortOrder
  rating: SortOrder
}

input ProductOrderByWithRelationInput {
  brand: SortOrder
  category: SortOrder
  countInStock: SortOrder
  description: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  numReviews: SortOrder
  price: SortOrder
  rating: SortOrder
}

enum ProductScalarFieldEnum {
  brand
  category
  countInStock
  description
  id
  image
  name
  numReviews
  price
  rating
}

input ProductScalarWhereWithAggregatesInput {
  AND: [ProductScalarWhereWithAggregatesInput!]
  NOT: [ProductScalarWhereWithAggregatesInput!]
  OR: [ProductScalarWhereWithAggregatesInput!]
  brand: StringWithAggregatesFilter
  category: StringWithAggregatesFilter
  countInStock: IntWithAggregatesFilter
  description: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  image: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  numReviews: IntWithAggregatesFilter
  price: FloatWithAggregatesFilter
  rating: FloatWithAggregatesFilter
}

type ProductSumAggregate {
  countInStock: Int
  numReviews: Int
  price: Float
  rating: Float
}

input ProductSumOrderByAggregateInput {
  countInStock: SortOrder
  numReviews: SortOrder
  price: SortOrder
  rating: SortOrder
}

input ProductUpdateInput {
  brand: StringFieldUpdateOperationsInput
  category: StringFieldUpdateOperationsInput
  countInStock: IntFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  numReviews: IntFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
}

input ProductUpdateManyMutationInput {
  brand: StringFieldUpdateOperationsInput
  category: StringFieldUpdateOperationsInput
  countInStock: IntFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  numReviews: IntFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  brand: StringFilter
  category: StringFilter
  countInStock: IntFilter
  description: StringFilter
  id: StringFilter
  image: StringFilter
  name: StringFilter
  numReviews: IntFilter
  price: FloatFilter
  rating: FloatFilter
}

input ProductWhereUniqueInput {
  id: String
}

type Query {
  aggregateProduct(cursor: ProductWhereUniqueInput, orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): AggregateProduct!
  findFirstProduct(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): Product
  findFirstProductOrThrow(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): Product
  getProduct(where: ProductWhereUniqueInput!): Product
  groupByProduct(by: [ProductScalarFieldEnum!]!, having: ProductScalarWhereWithAggregatesInput, orderBy: [ProductOrderByWithAggregationInput!], skip: Int, take: Int, where: ProductWhereInput): [ProductGroupBy!]!
  product(where: ProductWhereUniqueInput!): Product
  products(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}
